<?php
/**
 * Phone
 *
 * PHP version 5
 *
 * @category Class
 * @package  KuntaAPI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kunta API
 *
 * Solution to combine municipality services under single API.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KuntaAPI\Model;

use \ArrayAccess;

/**
 * Phone Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     KuntaAPI
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Phone implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Phone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'additionalInformation' => 'string',
        'serviceChargeType' => 'string',
        'chargeDescription' => 'string',
        'prefixNumber' => 'string',
        'isFinnishServiceNumber' => 'bool',
        'number' => 'string',
        'language' => 'string',
        'type' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'additionalInformation' => 'additionalInformation',
        'serviceChargeType' => 'serviceChargeType',
        'chargeDescription' => 'chargeDescription',
        'prefixNumber' => 'prefixNumber',
        'isFinnishServiceNumber' => 'isFinnishServiceNumber',
        'number' => 'number',
        'language' => 'language',
        'type' => 'type'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'additionalInformation' => 'setAdditionalInformation',
        'serviceChargeType' => 'setServiceChargeType',
        'chargeDescription' => 'setChargeDescription',
        'prefixNumber' => 'setPrefixNumber',
        'isFinnishServiceNumber' => 'setIsFinnishServiceNumber',
        'number' => 'setNumber',
        'language' => 'setLanguage',
        'type' => 'setType'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'additionalInformation' => 'getAdditionalInformation',
        'serviceChargeType' => 'getServiceChargeType',
        'chargeDescription' => 'getChargeDescription',
        'prefixNumber' => 'getPrefixNumber',
        'isFinnishServiceNumber' => 'getIsFinnishServiceNumber',
        'number' => 'getNumber',
        'language' => 'getLanguage',
        'type' => 'getType'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalInformation'] = isset($data['additionalInformation']) ? $data['additionalInformation'] : null;
        $this->container['serviceChargeType'] = isset($data['serviceChargeType']) ? $data['serviceChargeType'] : null;
        $this->container['chargeDescription'] = isset($data['chargeDescription']) ? $data['chargeDescription'] : null;
        $this->container['prefixNumber'] = isset($data['prefixNumber']) ? $data['prefixNumber'] : null;
        $this->container['isFinnishServiceNumber'] = isset($data['isFinnishServiceNumber']) ? $data['isFinnishServiceNumber'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets additionalInformation
     * @return string
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     * @param string $additionalInformation
     * @return $this
     */
    public function setAdditionalInformation($additionalInformation)
    {
        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }

    /**
     * Gets serviceChargeType
     * @return string
     */
    public function getServiceChargeType()
    {
        return $this->container['serviceChargeType'];
    }

    /**
     * Sets serviceChargeType
     * @param string $serviceChargeType
     * @return $this
     */
    public function setServiceChargeType($serviceChargeType)
    {
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets chargeDescription
     * @return string
     */
    public function getChargeDescription()
    {
        return $this->container['chargeDescription'];
    }

    /**
     * Sets chargeDescription
     * @param string $chargeDescription
     * @return $this
     */
    public function setChargeDescription($chargeDescription)
    {
        $this->container['chargeDescription'] = $chargeDescription;

        return $this;
    }

    /**
     * Gets prefixNumber
     * @return string
     */
    public function getPrefixNumber()
    {
        return $this->container['prefixNumber'];
    }

    /**
     * Sets prefixNumber
     * @param string $prefixNumber
     * @return $this
     */
    public function setPrefixNumber($prefixNumber)
    {
        $this->container['prefixNumber'] = $prefixNumber;

        return $this;
    }

    /**
     * Gets isFinnishServiceNumber
     * @return bool
     */
    public function getIsFinnishServiceNumber()
    {
        return $this->container['isFinnishServiceNumber'];
    }

    /**
     * Sets isFinnishServiceNumber
     * @param bool $isFinnishServiceNumber
     * @return $this
     */
    public function setIsFinnishServiceNumber($isFinnishServiceNumber)
    {
        $this->container['isFinnishServiceNumber'] = $isFinnishServiceNumber;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\KuntaAPI\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\KuntaAPI\ObjectSerializer::sanitizeForSerialization($this));
    }
}


